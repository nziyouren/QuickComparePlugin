package com.happy.plugin.quickcompare.ui;

import com.intellij.ide.util.PropertiesComponent;
import com.intellij.openapi.fileChooser.FileChooser;
import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.fileChooser.FileChooserDescriptorFactory;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Created by zxx on 2016/6/16.
 */
public class CompareForm {
    public JPanel mContentPanel;
    private JTextField mPathTextField;
    private JButton mChoosePathButton;

    private boolean mIsModified = false;

    public void apply() {
        System.out.println("apply........");
        mIsModified = false;

        System.out.println("select path:" + mPathTextField.getText());

        PropertiesComponent component = PropertiesComponent.getInstance();
        if (StringUtil.isEmpty(component.getValue("bc"))) {
            System.out.println("original path is empty!");
            component.setValue("bc", mPathTextField.getText());
        } else {
            System.out.println("original path is: " + component.getValue("bc"));
            component.setValue("bc", mPathTextField.getText());
            System.out.println("update path is: " + mPathTextField.getText());
        }

    }

    public void reset() {
        System.out.println("reset..........");
        PropertiesComponent component = PropertiesComponent.getInstance();
        String originalPath = component.getValue("bc");
        mPathTextField.setText(originalPath);
    }

    public CompareForm() {
        System.out.println("CompareForm constructor");
        mChoosePathButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                chooseFile();
            }
        });
        final PropertiesComponent component = PropertiesComponent.getInstance();
        if (!StringUtil.isEmpty(component.getValue("bc"))) {

            final String path = component.getValue("bc");

            mPathTextField.setText(path);
            mPathTextField.invalidate();
            mPathTextField.updateUI();
            mContentPanel.invalidate();
            mContentPanel.updateUI();

        }

    }


    private void chooseFile() {

        final FileChooserDescriptor descriptor = FileChooserDescriptorFactory.createSingleFileDescriptor();
        descriptor.setTitle("Select compare tool folder");
        VirtualFile virtualFile = FileChooser.chooseFile(descriptor, null, null);

        if (virtualFile == null) {
            return;
        }

        VirtualFile selectedFile = virtualFile;  //取得选中的文件

        mPathTextField.setText(selectedFile.getPath());
        mContentPanel.invalidate();
        mContentPanel.updateUI();
        mIsModified = true;

    }

    public boolean isModified() {
        return mIsModified;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mContentPanel = new JPanel();
        mContentPanel.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        mContentPanel.add(spacer1, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        mContentPanel.add(spacer2, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        mContentPanel.add(spacer3, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        mContentPanel.add(panel1, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Path to executable:     ");
        panel1.add(label1, BorderLayout.WEST);
        mPathTextField = new JTextField();
        panel1.add(mPathTextField, BorderLayout.CENTER);
        mChoosePathButton = new JButton();
        mChoosePathButton.setText("...");
        panel1.add(mChoosePathButton, BorderLayout.EAST);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mContentPanel;
    }
}
